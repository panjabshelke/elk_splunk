<?php //[STAMP] ef9221d6b32628e045cad2f3dab473cb

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile


use Codeception\Module\CodeHelper;

/**
 * Inherited Methods
 * @method void wantToTest($text)
 * @method void wantTo($text)
 * @method void execute($callable)
 * @method void expectTo($prediction)
 * @method void expect($prediction)
 * @method void amGoingTo($argumentation)
 * @method void am($role)
 * @method void lookForwardTo($achieveValue)
 * @method void comment($description)
 * @method void haveFriend($name, $actorClass = null)
 *
 * @SuppressWarnings(PHPMD)
*/
class CodeGuy extends \Codeception\Actor
{
   
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $message Message to log.
     * @see \Codeception\Module\CodeHelper::addElasticsearchLog()
     */
    public function addElasticsearchLog($message) {
        return $this->scenario->runStep(new \Codeception\Step\Action('addElasticsearchLog', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $message Message to log.
     * @param string $type    Type of message passed to logger.
     * @see \Codeception\Module\CodeHelper::addLogstashFileLog()
     */
    public function addLogstashFileLog($message, $type) {
        return $this->scenario->runStep(new \Codeception\Step\Action('addLogstashFileLog', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $message Message to log.
     * @see \Codeception\Module\CodeHelper::addRedisLog()
     */
    public function addRedisLog($message) {
        return $this->scenario->runStep(new \Codeception\Step\Action('addRedisLog', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $message Message to log.
     * @see \Codeception\Module\CodeHelper::addWrongElasticsearchLog()
     */
    public function addWrongElasticsearchLog($message) {
        return $this->scenario->runStep(new \Codeception\Step\Action('addWrongElasticsearchLog', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $message Message to log.
     * @see \Codeception\Module\CodeHelper::addWrongLogstashLog()
     */
    public function addWrongLogstashLog($message) {
        return $this->scenario->runStep(new \Codeception\Step\Action('addWrongLogstashLog', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $message Message to log.
     * @see \Codeception\Module\CodeHelper::addWrongRedisLog()
     */
    public function addWrongRedisLog($message) {
        return $this->scenario->runStep(new \Codeception\Step\Action('addWrongRedisLog', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\CodeHelper::dontSeeEmergencyLog()
     */
    public function cantSeeEmergencyLog() {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeEmergencyLog', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\CodeHelper::dontSeeEmergencyLog()
     */
    public function dontSeeEmergencyLog() {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('dontSeeEmergencyLog', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\CodeHelper::flushElasticsearch()
     */
    public function flushElasticsearch() {
        return $this->scenario->runStep(new \Codeception\Step\Action('flushElasticsearch', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\CodeHelper::flushRedis()
     */
    public function flushRedis() {
        return $this->scenario->runStep(new \Codeception\Step\Action('flushRedis', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\CodeHelper::removeEmergencyLog()
     */
    public function removeEmergencyLog() {
        return $this->scenario->runStep(new \Codeception\Step\Action('removeEmergencyLog', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\CodeHelper::removeLogstashFile()
     */
    public function removeLogstashFile() {
        return $this->scenario->runStep(new \Codeception\Step\Action('removeLogstashFile', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $message Message to log.
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\CodeHelper::seeElasticsearchLog()
     */
    public function canSeeElasticsearchLog($message) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeElasticsearchLog', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $message Message to log.
     * @see \Codeception\Module\CodeHelper::seeElasticsearchLog()
     */
    public function seeElasticsearchLog($message) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeElasticsearchLog', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $message Message to log.
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\CodeHelper::seeEmergencyLog()
     */
    public function canSeeEmergencyLog($message) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeEmergencyLog', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $message Message to log.
     * @see \Codeception\Module\CodeHelper::seeEmergencyLog()
     */
    public function seeEmergencyLog($message) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeEmergencyLog', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\CodeHelper::seeLogstashFile()
     */
    public function canSeeLogstashFile() {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeLogstashFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\CodeHelper::seeLogstashFile()
     */
    public function seeLogstashFile() {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeLogstashFile', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $message Message to log.
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\CodeHelper::seeRedisLog()
     */
    public function canSeeRedisLog($message) {
        return $this->scenario->runStep(new \Codeception\Step\ConditionalAssertion('seeRedisLog', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $message Message to log.
     * @see \Codeception\Module\CodeHelper::seeRedisLog()
     */
    public function seeRedisLog($message) {
        return $this->scenario->runStep(new \Codeception\Step\Assertion('seeRedisLog', func_get_args()));
    }
}
